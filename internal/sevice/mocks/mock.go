// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=mocks/mock.go
//

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	models "marketplace/internal/models"
	url "net/url"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthService is a mock of AuthService interface.
type MockAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceMockRecorder
	isgomock struct{}
}

// MockAuthServiceMockRecorder is the mock recorder for MockAuthService.
type MockAuthServiceMockRecorder struct {
	mock *MockAuthService
}

// NewMockAuthService creates a new mock instance.
func NewMockAuthService(ctrl *gomock.Controller) *MockAuthService {
	mock := &MockAuthService{ctrl: ctrl}
	mock.recorder = &MockAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthService) EXPECT() *MockAuthServiceMockRecorder {
	return m.recorder
}

// ParseJWT mocks base method.
func (m *MockAuthService) ParseJWT(ctx context.Context, authHeader string) (models.ClaimData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", ctx, authHeader)
	ret0, _ := ret[0].(models.ClaimData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockAuthServiceMockRecorder) ParseJWT(ctx, authHeader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockAuthService)(nil).ParseJWT), ctx, authHeader)
}

// SignUp mocks base method.
func (m *MockAuthService) SignUp(ctx context.Context, userData models.UserData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockAuthServiceMockRecorder) SignUp(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockAuthService)(nil).SignUp), ctx, userData)
}

// VerifyUser mocks base method.
func (m *MockAuthService) VerifyUser(ctx context.Context, userData models.UserData) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyUser", ctx, userData)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyUser indicates an expected call of VerifyUser.
func (mr *MockAuthServiceMockRecorder) VerifyUser(ctx, userData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyUser", reflect.TypeOf((*MockAuthService)(nil).VerifyUser), ctx, userData)
}

// MockAdvertisementService is a mock of AdvertisementService interface.
type MockAdvertisementService struct {
	ctrl     *gomock.Controller
	recorder *MockAdvertisementServiceMockRecorder
	isgomock struct{}
}

// MockAdvertisementServiceMockRecorder is the mock recorder for MockAdvertisementService.
type MockAdvertisementServiceMockRecorder struct {
	mock *MockAdvertisementService
}

// NewMockAdvertisementService creates a new mock instance.
func NewMockAdvertisementService(ctrl *gomock.Controller) *MockAdvertisementService {
	mock := &MockAdvertisementService{ctrl: ctrl}
	mock.recorder = &MockAdvertisementServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdvertisementService) EXPECT() *MockAdvertisementServiceMockRecorder {
	return m.recorder
}

// CreateAd mocks base method.
func (m *MockAdvertisementService) CreateAd(ctx context.Context, adData models.AdData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAd", ctx, adData)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAd indicates an expected call of CreateAd.
func (mr *MockAdvertisementServiceMockRecorder) CreateAd(ctx, adData any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAd", reflect.TypeOf((*MockAdvertisementService)(nil).CreateAd), ctx, adData)
}

// MockFeedService is a mock of FeedService interface.
type MockFeedService struct {
	ctrl     *gomock.Controller
	recorder *MockFeedServiceMockRecorder
	isgomock struct{}
}

// MockFeedServiceMockRecorder is the mock recorder for MockFeedService.
type MockFeedServiceMockRecorder struct {
	mock *MockFeedService
}

// NewMockFeedService creates a new mock instance.
func NewMockFeedService(ctrl *gomock.Controller) *MockFeedService {
	mock := &MockFeedService{ctrl: ctrl}
	mock.recorder = &MockFeedServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedService) EXPECT() *MockFeedServiceMockRecorder {
	return m.recorder
}

// Feed mocks base method.
func (m *MockFeedService) Feed(ctx context.Context, query url.Values, cursor, userLogin string) ([]models.AdForFeed, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feed", ctx, query, cursor, userLogin)
	ret0, _ := ret[0].([]models.AdForFeed)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Feed indicates an expected call of Feed.
func (mr *MockFeedServiceMockRecorder) Feed(ctx, query, cursor, userLogin any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feed", reflect.TypeOf((*MockFeedService)(nil).Feed), ctx, query, cursor, userLogin)
}

// ParseURIParams mocks base method.
func (m *MockFeedService) ParseURIParams(query url.Values, defaultLimit uint64) (models.FeedURIParams, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseURIParams", query, defaultLimit)
	ret0, _ := ret[0].(models.FeedURIParams)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseURIParams indicates an expected call of ParseURIParams.
func (mr *MockFeedServiceMockRecorder) ParseURIParams(query, defaultLimit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseURIParams", reflect.TypeOf((*MockFeedService)(nil).ParseURIParams), query, defaultLimit)
}
